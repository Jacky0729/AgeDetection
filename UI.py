{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f160eb50-a0c4-4d38-a895-dfa5c85a1a61",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-15 09:05:19.217 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Jacky Chong\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-09-15 09:05:19.217 No runtime found, using MemoryCacheStorageManager\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.applications import VGG16\n",
    "from tensorflow.keras.layers import Dense, Flatten, Dropout\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "# UI Components\n",
    "st.title(\"Multi-output Age, Gender, and Race Prediction using VGG16\")\n",
    "\n",
    "st.sidebar.header(\"Options\")\n",
    "data_dir = st.sidebar.text_input(\"Enter Dataset Directory\", \"C:/Users/Jacky Chong/Downloads/AI Assignment/Train\")\n",
    "img_size = st.sidebar.number_input(\"Image Size\", value=200)\n",
    "num_race_classes = st.sidebar.number_input(\"Number of Race Classes\", value=5)\n",
    "age_classes = st.sidebar.number_input(\"Number of Age Classes\", value=5)\n",
    "gender_classes = 2  # Male and Female\n",
    "\n",
    "# Function to classify age groups\n",
    "def get_age_group(age):\n",
    "    if age <= 8:\n",
    "        return 0\n",
    "    elif 9 <= age <= 18:\n",
    "        return 1\n",
    "    elif 19 <= age <= 39:\n",
    "        return 2\n",
    "    elif 40 <= age <= 59:\n",
    "        return 3\n",
    "    else:\n",
    "        return 4\n",
    "\n",
    "# Load and preprocess data\n",
    "@st.cache_data\n",
    "def load_images_and_labels(data_dir):\n",
    "    images = []\n",
    "    age_labels = []\n",
    "    gender_labels = []\n",
    "    race_labels = []\n",
    "    \n",
    "    for image_name in os.listdir(data_dir):\n",
    "        image_path = os.path.join(data_dir, image_name)\n",
    "        try:\n",
    "            image = load_img(image_path, target_size=(img_size, img_size))\n",
    "            image = img_to_array(image) / 255.0\n",
    "            images.append(image)\n",
    "\n",
    "            age, gender, race, _ = image_name.split('_')\n",
    "            age_label = get_age_group(int(age))\n",
    "            gender_label = int(gender)\n",
    "            race_label = int(race)\n",
    "\n",
    "            age_labels.append(age_label)\n",
    "            gender_labels.append(gender_label)\n",
    "            race_labels.append(race_label)\n",
    "        except Exception as e:\n",
    "            st.error(f\"Error processing image {image_name}: {e}\")\n",
    "    \n",
    "    return np.array(images), np.array(age_labels), np.array(gender_labels), np.array(race_labels)\n",
    "\n",
    "# Load dataset\n",
    "if st.button(\"Load Data\"):\n",
    "    images, age_labels, gender_labels, race_labels = load_images_and_labels(data_dir)\n",
    "    st.write(f\"Loaded {len(images)} images.\")\n",
    "\n",
    "# Split data into training and validation sets\n",
    "if st.button(\"Split Data\"):\n",
    "    X_train, X_val, y_age_train, y_age_val, y_gender_train, y_gender_val, y_race_train, y_race_val = train_test_split(\n",
    "        images, age_labels, gender_labels, race_labels, test_size=0.2, random_state=42)\n",
    "    st.write(\"Data split into training and validation sets.\")\n",
    "\n",
    "# Model construction\n",
    "if st.button(\"Build Model\"):\n",
    "    vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(img_size, img_size, 3))\n",
    "\n",
    "    for layer in vgg16.layers[:-10]:\n",
    "        layer.trainable = False\n",
    "\n",
    "    x = Flatten()(vgg16.output)\n",
    "    x = Dense(512, activation='relu')(x)\n",
    "    x = Dropout(0.5)(x)\n",
    "\n",
    "    # Branches for each output\n",
    "    age_branch = Dense(128, activation='relu')(x)\n",
    "    age_output = Dense(age_classes, activation='softmax', name='age_output')(age_branch)\n",
    "\n",
    "    gender_branch = Dense(128, activation='relu')(x)\n",
    "    gender_output = Dense(gender_classes, activation='softmax', name='gender_output')(gender_branch)\n",
    "\n",
    "    race_branch = Dense(128, activation='relu')(x)\n",
    "    race_output = Dense(num_race_classes, activation='softmax', name='race_output')(race_branch)\n",
    "\n",
    "    # Multi-output model\n",
    "    model = Model(inputs=vgg16.input, outputs=[age_output, gender_output, race_output])\n",
    "    model.compile(optimizer=Adam(learning_rate=0.0001),\n",
    "                  loss={'age_output': 'categorical_crossentropy',\n",
    "                        'gender_output': 'categorical_crossentropy',\n",
    "                        'race_output': 'categorical_crossentropy'},\n",
    "                  metrics={'age_output': 'accuracy',\n",
    "                           'gender_output': 'accuracy',\n",
    "                           'race_output': 'accuracy'})\n",
    "\n",
    "    st.write(\"Model built successfully.\")\n",
    "\n",
    "# Model Training\n",
    "if st.button(\"Train Model\"):\n",
    "    lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=0.00001)\n",
    "    early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "    \n",
    "    history = model.fit(X_train,\n",
    "                        {'age_output': y_age_train, 'gender_output': y_gender_train, 'race_output': y_race_train},\n",
    "                        validation_data=(X_val, {'age_output': y_age_val, 'gender_output': y_gender_val, 'race_output': y_race_val}),\n",
    "                        epochs=50,\n",
    "                        batch_size=32,\n",
    "                        callbacks=[lr_scheduler, early_stopping])\n",
    "    \n",
    "    st.write(\"Training complete.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1e02af2-bf2a-49af-b91b-2397233492eb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
